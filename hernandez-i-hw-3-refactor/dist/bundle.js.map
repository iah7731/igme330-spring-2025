{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://hernandez-i-hw-3-refactor/./src/utils.ts","webpack://hernandez-i-hw-3-refactor/./src/enums/audio-enums.ts","webpack://hernandez-i-hw-3-refactor/./src/audio.ts","webpack://hernandez-i-hw-3-refactor/./src/canvas.ts","webpack://hernandez-i-hw-3-refactor/./src/main.ts","webpack://hernandez-i-hw-3-refactor/./src/classes/circle.ts","webpack://hernandez-i-hw-3-refactor/./src/loader.ts"],"sourcesContent":["import * as utilsInterfaces from \"./interfaces/utils-interfaces\";\r\n\r\nconst makeColor = (red : number, green : number, blue : number, alpha : number = 1) : string => { //formats input into colors\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n  };\r\n  \r\n  const getRandom = (min : number, max : number) : number => { //gets random num\r\n    return Math.random() * (max - min) + min;\r\n  };\r\n  \r\n  const getRandomColor = () : string => { //gets random color\r\n    const floor = 35; // so that colors are not too bright or too dark \r\n    const getByte = () => getRandom(floor,255-floor);\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n  };\r\n  \r\n  const getLinearGradient = (\r\n    ctx : CanvasRenderingContext2D,\r\n    startX : number,\r\n    startY : number,\r\n    endX : number,\r\n    endY : number,\r\n    colorStops : utilsInterfaces.ColorStopList) : CanvasGradient => { //creates a gradient\r\n    let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n    for(let stop of colorStops){\r\n      lg.addColorStop(stop.percent,stop.color);\r\n    }\r\n    return lg;\r\n  };\r\n  \r\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\n  const goFullscreen = (element) => { // sets the canvas to full screen\r\n    if (element.requestFullscreen) {\r\n      element.requestFullscreen();\r\n    } else if (element.mozRequestFullscreen) {\r\n      element.mozRequestFullscreen();\r\n    } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n      element.mozRequestFullScreen();\r\n    } else if (element.webkitRequestFullscreen) {\r\n      element.webkitRequestFullscreen();\r\n    }\r\n    // .. and do nothing if the method is not supported\r\n  };\r\n\r\n  const drawCircle = (ctx : CanvasRenderingContext2D, color : string, x : number, y : number,radius : number) : void => {\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      ctx.fillStyle = color;\r\n      ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n      ctx.fill();\r\n      ctx.closePath();\r\n      ctx.restore();\r\n  }\r\n  \r\n  export {makeColor, getRandomColor, getLinearGradient, goFullscreen, drawCircle};","export enum WebAudioDefaults {\r\n    gain = .5,\r\n    numSamples = 256\r\n  }","import * as audioEnums from './enums/audio-enums';\r\n\r\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\n\r\nlet audioCtx : AudioContext;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\n\r\nlet element : HTMLAudioElement;\r\nlet sourceNode : MediaElementAudioSourceNode;\r\nlet analyserNode : AnalyserNode;\r\nlet gainNode : GainNode; \r\nlet highShelfBiquadFilterNode : BiquadFilterNode;\r\nlet lowShelfBiquadFilterNode : BiquadFilterNode;\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\n\r\nconst setupWebaudio = (filePath: string) : void => {\r\n    // 1 - The | | is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext;\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio(); //document.querySelector(\"audio\");\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5 - create an analyser node\r\n    analyserNode = audioCtx.createAnalyser(); // note the UK spelling of \"Analyser\"\r\n    /*\r\n    // 6\r\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally\r\n    across the sound spectrum.\r\n\r\n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz,\r\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing\r\n    the amplitude of that frequency.\r\n    */\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = audioEnums.WebAudioDefaults.numSamples;\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = audioEnums.WebAudioDefaults.gain;\r\n\r\n    // 8 - create nodes for the high and low shelf filters\r\n    highShelfBiquadFilterNode = audioCtx.createBiquadFilter();\r\n    highShelfBiquadFilterNode.type = \"highshelf\";\r\n\r\n    lowShelfBiquadFilterNode = audioCtx.createBiquadFilter();\r\n    lowShelfBiquadFilterNode.type = \"lowshelf\";\r\n\r\n    // 9 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(lowShelfBiquadFilterNode);\r\n    lowShelfBiquadFilterNode.connect(highShelfBiquadFilterNode);\r\n    highShelfBiquadFilterNode.connect(gainNode);\r\n    gainNode.connect(analyserNode);\r\n    analyserNode.connect(audioCtx.destination);\r\n    \r\n}\r\n\r\n\r\nconst loadSoundFile = (filePath: string)  : void => {\r\n    element.src = filePath;\r\n}\r\n\r\n\r\nconst playCurrentSound = () : void => {\r\n    element.play();\r\n}\r\n\r\nconst pauseCurrentSound = () : void => {\r\n    element.pause();\r\n}\r\n\r\nconst setVolume = (value: number | string) : void => {\r\n    value = Number(value); // make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n}\r\n\r\nexport { audioCtx, setupWebaudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, analyserNode, highShelfBiquadFilterNode, lowShelfBiquadFilterNode };","import * as utils from './utils';\r\nimport * as canvasInterfaces from './interfaces/canvas-interfaces';\r\nimport * as utilsInterfaces from './interfaces/utils-interfaces';\r\n\r\nlet ctx : CanvasRenderingContext2D, \r\ncanvasWidth : number, \r\ncanvasHeight : number, \r\ngradient : CanvasGradient,\r\nanalyserNode : AnalyserNode, \r\naudioData : Uint8Array, \r\nfrequencyDataRadioButton : HTMLInputElement, \r\ntimeDomainRadioButton : HTMLInputElement;\r\nlet noiseAmount : number = 0.05;\r\n\r\n\r\nconst setupCanvas = (canvasElement : HTMLCanvasElement, analyserNodeRef: AnalyserNode) : void => { // sets up the canvas\r\n    // create drawing context\r\n    ctx = canvasElement.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n\r\n    // create a gradient that runs top to bottom\r\n\r\n    const gradientStops: utilsInterfaces.ColorStop[] = [\r\n        { percent: 0, color: \"#d70071\" },\r\n        { percent: 1, color: \"#0035a9\" },\r\n        { percent: 0.5, color: \"#9c4e97\" }\r\n      ];\r\n      \r\n      gradient = utils.getLinearGradient(ctx, 0, 0, 0, canvasHeight, gradientStops);\r\n\r\n    // keep a reference to the analyser node\r\n    analyserNode = analyserNodeRef;\r\n    // this is the array where the analyser data will be stored\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n    frequencyDataRadioButton = document.querySelector(\"#radio-frequency-data\") as HTMLInputElement;\r\n    timeDomainRadioButton = document.querySelector(\"#radio-time-domain\") as HTMLInputElement;\r\n}\r\n\r\n\r\n\r\nconst draw = (params : canvasInterfaces.DrawParams) : void => { // draws to the canvas each frame\r\n    // 1 - populate the audioData array with the frequency data from the analyserNode\r\n    // notice these arrays are passed \"by reference\"\r\n    if (frequencyDataRadioButton.checked) {\r\n        analyserNode.getByteFrequencyData(audioData);\r\n    }\r\n    if (timeDomainRadioButton.checked) {\r\n        analyserNode.getByteTimeDomainData(audioData);\r\n    }\r\n\r\n    // 2 - draw background\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    // 3 - draw gradient\r\n    if (params.showGradient) {\r\n        ctx.save();\r\n        ctx.fillStyle = gradient;\r\n        ctx.globalAlpha = 0.3;\r\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n        ctx.restore();\r\n    }\r\n\r\n    // 4 - draw bars\r\n\r\n    const barSpacing :number = 4;\r\n    const margin:number = 5;\r\n    const screenWidthForBars:number = canvasWidth - (audioData.length * barSpacing) - margin * 2;\r\n    const barWidth:number = screenWidthForBars / audioData.length;\r\n\r\n    if (params.showBars && frequencyDataRadioButton.checked) {\r\n\r\n        let barHeight = 200;\r\n        let topSpacing = 100;\r\n\r\n        ctx.save();\r\n        ctx.fillStyle = 'rgba(255,255,255,0.50)';\r\n        ctx.strokeStyle = 'rgba(0,0,0,0.50)';\r\n        // loop through the data and draw!\r\n        for (let i : number = 0; i < audioData.length; i++) {\r\n            ctx.fillRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\r\n            ctx.strokeRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n    else if (params.showBars && timeDomainRadioButton.checked) {\r\n        let barHeight = 10;\r\n        let topSpacing = 100;\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = 'rgba(255,255,255,0.50)';\r\n        ctx.fillStyle = 'rgba(0,0,0,0.50)';\r\n        // loop through the data and draw!\r\n        for (let i : number = 0; i < audioData.length; i++) {\r\n            ctx.fillRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\r\n            ctx.strokeRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    // 5 - draw circles\r\n    if (params.showCircles && frequencyDataRadioButton.checked) {\r\n        let maxRadius = canvasHeight / 4;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n        for (let i : number = 0; i < audioData.length; i++) {\r\n            // red-ish circles\r\n            let percent = audioData[i] / 255;\r\n            let circleRadius = percent * maxRadius;\r\n            utils.drawCircle(ctx, utils.makeColor(99, 177, 104, .34 - percent / 3.0), canvasWidth / 2, canvasHeight / 2, circleRadius);\r\n\r\n            // blue-ish circles, bigger, more transparent\r\n            utils.drawCircle(ctx, utils.makeColor(40, 255, 142, .10 - percent / 10.0), canvasWidth / 2, canvasHeight / 2, circleRadius * 1.5);\r\n\r\n            // yellow-ish circles, smaller\r\n            utils.drawCircle(ctx, utils.makeColor(255, 202, 86, .5 - percent / 5.0), canvasWidth / 2, canvasHeight / 2, circleRadius * .50);\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    else if (params.showCircles && timeDomainRadioButton.checked) {\r\n\r\n        let maxRadius :number = canvasHeight / 8;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n\r\n        for (let i : number = 0; i < audioData.length; i++) {\r\n            if (audioData[i] / 255 >= 0.502) {\r\n                // orange circles\r\n                let percent :number = audioData[i] / 255;\r\n                let circleRadius : number = percent * maxRadius;\r\n                utils.drawCircle(ctx, utils.makeColor(245, 150, 42, .34 - percent / 3.0), canvasWidth / 2, (canvasHeight / 2) + 125, circleRadius);\r\n\r\n                // red circles, bigger, more transparent\r\n                utils.drawCircle(ctx, utils.makeColor(245, 65, 22, .10 - percent / 10.0), canvasWidth / 2, (canvasHeight / 2) + 125, circleRadius * 1.5);\r\n\r\n                // yellow circles, smaller\r\n                utils.drawCircle(ctx, utils.makeColor(245, 211, 78, .5 - percent / 5.0), canvasWidth / 2, (canvasHeight / 2) + 125, circleRadius * .50);\r\n            }\r\n\r\n        }\r\n        ctx.restore();\r\n\r\n    }\r\n\r\n    // 6 - bitmap manipulation\r\n    // TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n    // regardless of whether or not we are applying a pixel effect\r\n    // At some point, refactor this code so that we are looping though the image data only if\r\n    // it is necessary\r\n\r\n    // A) grab all of the pixels on the canvas and put them in the `data` array\r\n    // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n    // the variable `data` below is a reference to that array\r\n\r\n    let imageData:ImageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data: Uint8ClampedArray = imageData.data;\r\n    let length:number = data.length;\r\n    let width:number = imageData.width; // not using here\r\n\r\n    for (let i : number = 0; i < length; i += 4) {\r\n        // C) randomly change every nth pixel to black depending on user input\r\n        if (params.showNoise && Math.random() < noiseAmount) {\r\n            // data[i] is the red channel\r\n            // data[i+1] is the green channel\r\n            // data[i+2] is the blue channel\r\n            // data[i+3] is the alpha channel\r\n            data[i] = data[i + 1] = data[i + 2] = 0; // zero out the red and green and blue channels\r\n            data[i] = 0; // make the red channel 100% red\r\n        } // end if\r\n\r\n        // invert?\r\n        if (params.showInvert) {\r\n            let red : number = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i] = 255 - red;\r\n            data[i + 1] = 255 - green;\r\n            data[i + 2] = 255 - blue;\r\n            //data[i+3] is the alpha, but we're leaving that alone\r\n\r\n            // set red\r\n            // set green\r\n            // set blue\r\n        }\r\n\r\n    } // end for\r\n\r\n    if (params.showEmboss) {\r\n        // note we are stepping though *each* sub-pixel\r\n        for (let i : number = 0; i < length; i++) {\r\n            if (i % 4 == 3) continue; // skip alpha channel\r\n            data[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\r\n        }\r\n    }\r\n    // D) copy data back to canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\nconst editNoiseAmount = (num:number) : void =>\r\n{\r\n    noiseAmount = num;\r\n}\r\n\r\n\r\nexport { setupCanvas, draw, ctx, editNoiseAmount, audioData, canvasHeight, canvasWidth};","/*\r\n    main.js is primarily responsible for hooking up the UI to the rest of the application \r\n    and setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './canvas';\r\nimport * as circle from \"./classes/circle\";\r\nimport * as canvasInterfaces from \"./interfaces/canvas-interfaces\";\r\n\r\n\r\nconst drawParams : canvasInterfaces.DrawParams = {\r\n    showGradient: true,\r\n    showBars: true,\r\n    showCircles: true,\r\n    showNoise: false,\r\n    showInvert: false,\r\n    showEmboss: false,\r\n    highshelf: false,\r\n    lowshelf: false\r\n};\r\n\r\nlet circleSprite1 : circle.CircleSprite,\r\ncircleSprite2 : circle.CircleSprite,\r\ncircleSprite3  : circle.CircleSprite,\r\ncircleSprite4 : circle.CircleSprite,\r\naudioFilenames : string[], \r\naudioMetadata : string[],\r\ntrackSelect : HTMLSelectElement;\r\nlet DEFAULTS;\r\n\r\nconst jsonDataFill = (jsonData) : void =>\r\n{\r\n    const titleAV = document.querySelector(\"#title-av\") as HTMLTitleElement;\r\n    titleAV.innerHTML = jsonData.title;\r\n\r\n    const headingAV = document.querySelector(\"#heading-av\") as HTMLHeadingElement;\r\n    headingAV.innerHTML = jsonData.title;\r\n\r\n    circleSprite1 = new circle.CircleSprite(jsonData.spriteValues.x[0], jsonData.spriteValues.y[0], jsonData.spriteValues.radius[0], jsonData.spriteValues.xMoveSpeed[0],jsonData.spriteValues.yMoveSpeed[0],canvas.canvasWidth,canvas.canvasHeight);\r\n    circleSprite2 = new circle.CircleSprite(jsonData.spriteValues.x[1], jsonData.spriteValues.y[1], jsonData.spriteValues.radius[1], jsonData.spriteValues.xMoveSpeed[1],jsonData.spriteValues.yMoveSpeed[1],canvas.canvasWidth,canvas.canvasHeight);\r\n    circleSprite3 = new circle.CircleSprite(jsonData.spriteValues.x[2], jsonData.spriteValues.y[2], jsonData.spriteValues.radius[2], jsonData.spriteValues.xMoveSpeed[2],jsonData.spriteValues.yMoveSpeed[2],canvas.canvasWidth,canvas.canvasHeight);\r\n    circleSprite4 = new circle.CircleSprite(jsonData.spriteValues.x[3], jsonData.spriteValues.y[3], jsonData.spriteValues.radius[3], jsonData.spriteValues.xMoveSpeed[3],jsonData.spriteValues.yMoveSpeed[3],canvas.canvasWidth,canvas.canvasHeight);\r\n    audioFilenames = new Array(jsonData.sounds.filenames[0],jsonData.sounds.filenames[1],jsonData.sounds.filenames[2]);\r\n    audioMetadata = new Array(jsonData.sounds.track[0],jsonData.sounds.track[1],jsonData.sounds.track[2]);\r\n\r\n    trackSelect = document.querySelector(\"#track-select\") as HTMLSelectElement;\r\n\r\n    for (let i = 0; i < 3; i += 1)\r\n    {\r\n        let newOption = document.createElement('option');\r\n        newOption.text = jsonData.sounds.track[i];\r\n        newOption.value = jsonData.sounds.filenames[i];\r\n\r\n        trackSelect.add(newOption,null);\r\n    }\r\n\r\n    // 1 - here we are faking an enumeration\r\n    DEFAULTS = Object.freeze({\r\n        sound1: audioFilenames[0],\r\n    });\r\n}\r\n\r\nconst init = () : void => { // sets up the infinite loop\r\n    console.log(\"init called\");\r\n    console.log(`Testing utils.getRandomColor() import: ${utils.getRandomColor()}`);\r\n    audio.setupWebaudio(DEFAULTS.sound1);\r\n    let canvasElement = document.querySelector(\"canvas\") as HTMLCanvasElement; // hookup <canvas> element\r\n    setupUI(canvasElement);\r\n    canvas.setupCanvas(canvasElement, audio.analyserNode);\r\n    loop();\r\n}\r\n\r\nconst toggleHighshelf = () : void => {\r\n    if (drawParams.highshelf) {\r\n        audio.highShelfBiquadFilterNode.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n        audio.highShelfBiquadFilterNode.gain.setValueAtTime(25, audio.audioCtx.currentTime);\r\n    } else {\r\n        audio.highShelfBiquadFilterNode.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n    }\r\n}\r\n\r\nconst toggleLowshelf = () : void => {\r\n    if (drawParams.lowshelf) {\r\n        audio.lowShelfBiquadFilterNode.frequency.setValueAtTime(1000, audio.audioCtx.currentTime);\r\n        audio.lowShelfBiquadFilterNode.gain.setValueAtTime(15, audio.audioCtx.currentTime);\r\n    } else {\r\n        audio.lowShelfBiquadFilterNode.gain.setValueAtTime(0, audio.audioCtx.currentTime);\r\n    }\r\n}\r\n\r\n\r\n\r\nconst setupUI = (canvasElement : HTMLCanvasElement) : void => { // sets up the UI\r\n    // A - hookup fullscreen button\r\n    const fsButton = document.querySelector(\"#fs-btn\") as HTMLButtonElement;\r\n    const playButton = document.querySelector(\"#play-btn\") as HTMLButtonElement;\r\n\r\n    const highShelfCB = document.querySelector('#cb-highshelf') as HTMLInputElement;\r\n    const lowShelfCB = document.querySelector('#cb-lowshelf') as HTMLInputElement;\r\n\r\n    // I. set the initial state of the high shelf checkbox\r\n    highShelfCB.checked = drawParams.highshelf;\r\n\r\n    // II. change the value of `highshelf` every time the high shelf checkbox changes state\r\n    highShelfCB.onchange = e => {\r\n        drawParams.highshelf = (e.target as HTMLInputElement).checked;\r\n        toggleHighshelf(); // turn on or turn off the filter, depending on the value of `highshelf`!\r\n    };\r\n\r\n    // III. \r\n    toggleHighshelf();\r\n\r\n    // IIII. set the initial state of the low shelf checkbox\r\n    lowShelfCB.checked = drawParams.lowshelf; \r\n\r\n    // IIIII. change the value of `lowshelf` every time the low shelf checkbox changes state\r\n    lowShelfCB.onchange = e => {\r\n        drawParams.lowshelf = (e.target as HTMLInputElement).checked;\r\n        toggleLowshelf(); // turn on or turn off the filter, depending on the value of `lowshelf`!\r\n    };\r\n\r\n    // IIIIII. \r\n    toggleLowshelf();\r\n\r\n    // add .onclick event to button\r\n    fsButton.onclick = e => {\r\n        console.log(\"goFullscreen() called\");\r\n        utils.goFullscreen(canvasElement);\r\n    };\r\n\r\n    // add .onclick event to button\r\n    playButton.onclick = (e: MouseEvent) => {\r\n        const btn = e.target as HTMLButtonElement;\r\n        console.log('audioCtx.state before = ${audio.audioCtx.state}');\r\n\r\n        // check if context is in suspended state (autoplay policy)\r\n        if (audio.audioCtx.state == \"suspended\") {\r\n            audio.audioCtx.resume();\r\n        }\r\n        console.log('audioCtx.state after = ${audio.audioCtx.state}');\r\n        if (btn.dataset.playing == \"no\") {\r\n            // if track is currently paused, play it\r\n            audio.playCurrentSound();\r\n            btn.dataset.playing = \"yes\"; // our CSS will set the text to \"Pause\"\r\n\r\n        }\r\n        else {\r\n            // if track IS playing, pause it\r\n            audio.pauseCurrentSound();\r\n            btn.dataset.playing = \"no\"; // our CSS will set the text to \"Play\"\r\n        }\r\n\r\n    }\r\n\r\n    // C - hookup volume and noise slider & label\r\n    const volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n    const volumeLabel = document.querySelector(\"#label-volume\") as HTMLLabelElement;\r\n\r\n    // add .oninput event to slider\r\n    volumeSlider.oninput = () => {\r\n        // set the gain\r\n        audio.setVolume(parseFloat(volumeSlider.value));\r\n        // update value of label to match value of slider\r\n        volumeLabel.innerHTML = `${Math.round((parseFloat(volumeSlider.value) / 2) * 100)}`;\r\n    };\r\n\r\n    // set value of label to match initial value of slider\r\n    volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    //repeat this same process with the noise slider\r\n\r\n    const noiseSlider = document.querySelector(\"#slider-noise\") as HTMLInputElement;\r\n    let noiseLabel = document.querySelector(\"#label-noise\") as HTMLInputElement;\r\n\r\n    noiseSlider.oninput = () => {\r\n        canvas.editNoiseAmount(parseFloat(noiseSlider.value));\r\n        noiseLabel.innerHTML = `${Math.round((parseFloat(noiseSlider.value) / 2) * 100)}`;\r\n    }\r\n\r\n    noiseSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    // D - hookup track <select>\r\n    // add .onchange event to <select>\r\n    trackSelect.onchange = () => {\r\n        audio.loadSoundFile(trackSelect.value);\r\n        // pause the current track if it is playing\r\n        if (playButton.dataset.playing == \"yes\") {\r\n            playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n        }\r\n\r\n    };\r\n\r\n    let gradientCB = document.querySelector(\"#cb-gradient\") as HTMLInputElement;\r\n    let barsCB = document.querySelector(\"#cb-bars\") as HTMLInputElement;\r\n    let circlesCB = document.querySelector(\"#cb-circles\") as HTMLInputElement;\r\n    let noiseCB = document.querySelector(\"#cb-noise\") as HTMLInputElement;\r\n    let invertCB = document.querySelector(\"#cb-invert\")  as HTMLInputElement;\r\n    let embossCB = document.querySelector(\"#cb-emboss\")  as HTMLInputElement;\r\n\r\n    gradientCB.addEventListener('change', () => {\r\n        if (gradientCB.checked) {\r\n            drawParams.showGradient = true;\r\n        }\r\n        else {\r\n            drawParams.showGradient = false;\r\n        }\r\n    })\r\n\r\n    barsCB.addEventListener('change', () => {\r\n        if (barsCB.checked) {\r\n            drawParams.showBars = true;\r\n        }\r\n        else {\r\n            drawParams.showBars = false;\r\n        }\r\n    })\r\n\r\n    circlesCB.addEventListener('change', () => {\r\n        if (circlesCB.checked) {\r\n            drawParams.showCircles = true;\r\n        }\r\n        else {\r\n            drawParams.showCircles = false;\r\n        }\r\n    })\r\n\r\n    noiseCB.addEventListener('change', () => {\r\n        if (noiseCB.checked) {\r\n            drawParams.showNoise = true;\r\n        }\r\n        else {\r\n            drawParams.showNoise = false;\r\n        }\r\n    })\r\n\r\n    invertCB.addEventListener('change', () => {\r\n        if (invertCB.checked) {\r\n            drawParams.showInvert = true;\r\n        }\r\n        else {\r\n            drawParams.showInvert = false;\r\n        }\r\n    })\r\n\r\n    embossCB.addEventListener('change', () => {\r\n        if (embossCB.checked) {\r\n            drawParams.showEmboss = true;\r\n        }\r\n        else {\r\n            drawParams.showEmboss = false;\r\n        }\r\n    })\r\n};\r\n\r\nconst loop = () => {\r\n    setTimeout(loop, 17);\r\n    circleSprite1.update();\r\n    circleSprite2.update();\r\n    circleSprite3.update();\r\n    circleSprite4.update();\r\n    canvas.draw(drawParams);\r\n    circleSprite1.draw(canvas.ctx);\r\n    circleSprite2.draw(canvas.ctx);\r\n    circleSprite3.draw(canvas.ctx);\r\n    circleSprite4.draw(canvas.ctx);\r\n}\r\n\r\nexport { init, jsonDataFill };","import * as utils from '../utils';\r\nimport * as canvas from '../canvas';\r\n\r\nclass CircleSprite {\r\n    private x: number;\r\n    private y: number;\r\n    private radius: number;\r\n    private color: string;\r\n    private xMoveSpeed: number;\r\n    private yMoveSpeed: number;\r\n    private canvasWidth: number;\r\n    private canvasHeight: number;\r\n\r\n    constructor(\r\n        x :number, \r\n        y: number, \r\n        radius:number, \r\n        xMoveSpeed:number, \r\n        yMoveSpeed:number,\r\n        canvasWidth:number,\r\n        canvasHeight:number)\r\n\r\n        { //assign values to the circle\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = utils.makeColor(0, 0, 0, 255);\r\n        this.xMoveSpeed = xMoveSpeed;\r\n        this.yMoveSpeed = yMoveSpeed\r\n        this.canvasWidth = canvasWidth;\r\n        this.canvasHeight = canvasHeight;\r\n    }\r\n\r\n    update = () : void => { // update the ball's position and bounce it off the corners of the canvas if audio is playing\r\n        this.colorUpdate();\r\n\r\n        const playBtn = document.querySelector(\"#play-btn\") as HTMLButtonElement;\r\n\r\n        if(playBtn.dataset.playing == \"yes\")\r\n        {\r\n            if (this.x + this.xMoveSpeed > this.canvasWidth - this.radius || this.x + this.xMoveSpeed < this.radius) {\r\n                this.xMoveSpeed = -this.xMoveSpeed;\r\n            }\r\n            if (this.y + this.yMoveSpeed > this.canvasHeight - this.radius || this.y + this.yMoveSpeed < this.radius) {\r\n                this.yMoveSpeed = -this.yMoveSpeed;\r\n            }\r\n    \r\n            this.x += this.xMoveSpeed;\r\n            this.y += this.yMoveSpeed;\r\n        }\r\n    }\r\n\r\n    draw = (ctx : CanvasRenderingContext2D) : void => { //draw the circle if audio is playing\r\n\r\n        const playBtn = document.querySelector(\"#play-btn\") as HTMLButtonElement; // grab the button\r\n\r\n        if(playBtn.dataset.playing == \"yes\")\r\n        {\r\n            utils.drawCircle(ctx, this.color, this.x, this.y, this.radius);\r\n        }\r\n    }\r\n\r\n    colorUpdate = () : void => { //change the color based on the average of audioData\r\n        let newColor = 0;\r\n        for (let i = 0; i < canvas.audioData.length; i++) {\r\n            newColor += canvas.audioData[i];\r\n        }\r\n\r\n        newColor = newColor / canvas.audioData.length;\r\n\r\n        this.color = utils.makeColor(newColor, newColor, newColor, 255);\r\n    }\r\n}\r\n\r\nexport {CircleSprite};","import * as main from \"./main\";\r\nwindow.onload = () : void => {\r\n    console.log(\"window.onload called\");\r\n    fetch('../data/av-data.json')\r\n        .then((response : Response) => {\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then((jsonData : any) => {\r\n            main.jsonDataFill(jsonData);\r\n            main.init(); \r\n        })\r\n        .catch((error : Error) => console.error(\"Error loading JSON:\", error));\r\n};\r\n\r\n"],"names":["WebAudioDefaults","audioCtx","sourceNode","analyserNode","gainNode","highShelfBiquadFilterNode","lowShelfBiquadFilterNode","makeColor","red","green","blue","alpha","drawCircle","ctx","color","x","y","radius","save","beginPath","fillStyle","arc","Math","PI","fill","closePath","restore","canvasWidth","canvasHeight","gradient","audioData","frequencyDataRadioButton","timeDomainRadioButton","circleSprite1","circleSprite2","circleSprite3","circleSprite4","audioFilenames","trackSelect","DEFAULTS","loadSoundFile","filePath","src","noiseAmount","xMoveSpeed","yMoveSpeed","update","colorUpdate","document","querySelector","dataset","playing","draw","newColor","i","length","this","drawParams","showGradient","showBars","showCircles","showNoise","showInvert","showEmboss","highshelf","lowshelf","init","AudioContext","getByte","console","log","random","sound1","window","Audio","createMediaElementSource","createAnalyser","fftSize","numSamples","createGain","gain","value","createBiquadFilter","type","connect","destination","canvasElement","setupUI","analyserNodeRef","getContext","width","height","startX","startY","endX","endY","lg","createLinearGradient","percent","addColorStop","Uint8Array","loop","toggleHighshelf","frequency","setValueAtTime","currentTime","toggleLowshelf","fsButton","playButton","highShelfCB","lowShelfCB","checked","onchange","e","target","onclick","element","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","btn","state","resume","play","pause","volumeSlider","volumeLabel","oninput","parseFloat","Number","innerHTML","round","dispatchEvent","Event","noiseSlider","noiseLabel","num","MouseEvent","gradientCB","barsCB","circlesCB","noiseCB","invertCB","embossCB","addEventListener","setTimeout","params","getByteFrequencyData","getByteTimeDomainData","globalAlpha","fillRect","barWidth","margin","barHeight","topSpacing","strokeStyle","strokeRect","maxRadius","circleRadius","imageData","getImageData","data","putImageData","onload","fetch","then","response","ok","Error","status","json","jsonData","title","spriteValues","Array","sounds","filenames","track","newOption","createElement","text","add","Object","freeze","catch","error"],"sourceRoot":""}